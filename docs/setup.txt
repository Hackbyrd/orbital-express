===============================================================================
================================== SET UP =====================================
===============================================================================

1. Add SSH Key to Github
https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent

===============================================================================

2. Download Xcode and install components by opening app and agreeing to terms.

===============================================================================

3. Set Up Text Editor Config (Download text editor of your choice)
  VSCode:
    Create Symlink: Open the Command Palette (Cmd+Shift+P) and type 'shell command' to find the Shell Command: Install 'code' command in PATH command.

    Add these to vscode setting.json (Cog icon on bottom left corner)
      {
        "editor.tabSize": 2,
        "files.trimTrailingWhitespace": true,
        "files.insertFinalNewline": true
      }
    cmd + shift + p search for path and install it

  Modify Crontab Editor (Optional: only to view):
    Add the following to ~/.bash_profile
    export VISUAL=/usr/local/bin/code
    export EDITOR=/usr/local/bin/code
    source ~/.bash_profile

  ------------------------------------------------------

  Sublime:
    "tab_size": 2,
    "translate_tabs_to_spaces": true,
    "trim_trailing_white_space_on_save": true,
    "word_wrap": "false",
    "eof_newline": true

  Create Symlink:
    sudo mkdir -p /usr/local/bin
    echo 'export PATH=/usr/local/bin:$PATH' >> ~/.bash_profile
    source ~/.bash_profile
    sudo ln -s /Applications/Sublime\ Text.app/Contents/SharedSupport/bin/subl /usr/local/bin/subl

  Modify Crontab Editor (Optional: only to view):
    Add the following to ~/.bash_profile
    export VISUAL=/usr/local/bin/subl
    export EDITOR=/usr/local/bin/subl
    source ~/.bash_profile

===============================================================================

4. Make sure you are using the "zsh" shell, which should be default on Mac.
  Run: echo $SHELL
  It should return "/bin/zsh", therefore you need to use the ~/.zshrc profile

===============================================================================

5. Install Homebrew
  Install Homebrew -> http://brew.sh
  Run: /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
  Open ~/.zshrc
  Add code below to ~/.zshrc
    export PATH=/opt/homebrew/bin:$PATH

  Restart Terminal
  Run: brew update

===============================================================================

5. Install Node Version Manager (NVM)
  Instructions: https://github.com/creationix/nvm
  Run: curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | zsh
  Notice we are installing as "zsh" and NOT "bash"

===============================================================================

6. Install node.js
  nvm install v16.13.2

===============================================================================

7. Download Yarn Package Manager
  npm install --global yarn

===============================================================================

5. Download PostgreSQL App for Mac
  https://postgresapp.com/
  Open the postgresapp up and click "Initialize"

  Add the following to use 'psql' command: [!!NOTE you MUST add psql into your $PATH before you run "yarn install" below or else it will crash!]
  Run: sudo mkdir -p /etc/paths.d && echo /Applications/Postgres.app/Contents/Versions/latest/bin | sudo tee /etc/paths.d/postgresapp

  Set Timezone to UTC:
    Run in Terminal:
      PGTZ=UTC psql -c 'show timezone'
      http://stackoverflow.com/questions/11779293/how-to-set-timezone-for-postgres-psql/11779417#11779417
    Open up "postgresql.conf" file:
      Run: code ~/Library/Application\ Support/Postgres/var-[YOUR_VERSION]/postgresql.conf
      Inside postgresql.conf change the following configurations:
        log_timezone = 'America/New_York' --> log_timezone = 'UTC'
        timezone = 'America/New_York' --> timezone = 'UTC'
    Restart Postgres app

===============================================================================

6. Install Postico PostgreSQL Client App
  Download from "https://eggerapps.at/postico/" or Mac app store
  Open and add a "localhost" connection. Password should be empty string

===============================================================================

7. Create Databases on local computer using the Postico Client App
  create database name 'orbital_dev' and 'orbital_test'

===============================================================================

8. Download Redis In Memory Database
  Download from "https://redis.io/download"
  Unzip and move folder to under main directory "orbital-express"
  Remember the version, and delete the version so the folder is just called "redis"
  Change into the "redis" folder and create an empty text file with the version number so you can remember what version of redis you have. Example File Name: "v6.2.6"
  Next, run the follow commands (Last command is to run the server):
    make
    make test
    src/redis-server

===============================================================================

9. Install all node modules dependencies
  yarn install

===============================================================================

10. Set up Configurations:
  Create two new files under orbital-express/config/
    .env.development
    .env.test
  Copy .env.template contents into the two files above and edit based on your configurations

===============================================================================

11. Install ngrok for development webhooks
  https://ngrok.com/download
  ./ngrok http 8000

===============================================================================

12. Migrate Database, to create tables and columns in database
  Run: yarn migrate

===============================================================================

13. Set Up Third Party Vendors
  - Heroku
    - Mailtrap
  - MessageBird
  - Mailgun
  - Mailchimp
  - Auth0
  - Plaid

===============================================================================

14. Run Full Application (Make sure orbital_dev database is created)
  1. Run Main Server
    yarn s

  2. Run Redis Instance (If not already on)
    yarn redis

  3. Run Background Worker Server (For background jobs)
    yarn worker

  4. Run Cronjobs (for scheduled jobs)
    yarn cron

  5. Run ngrok (for testing webhooks in development)
    yarn ngrok

===============================================================================

15. Run All Tests (Redis must be running and orbital_test database must be created)
  yarn test